#!/bin/bash
# Creates xz or lrzip compressed archives with progress bar based on total size of files.
# lrzip is resource-intensive and can max out all cores. Use this with caution.
red='\e[1;31m'
green='\e[1;32m'
white='\e[1;97m'
reset='\e[0m'
if [[ $# -le 1 ]]; then
	echo -e "\n${red}Missing Arguments!\n\nUsage:\n\t${white}tarz [xz|lrzip] ~/in_dir out_name${reset}\n"
	echo -e "\n\nCan create large xz or lrzip compressed archives with progress bar based on total size of files.\nlrzip is resource-intensive and can max out all cores. Use this with caution.\n"
	exit 1
fi
SIZE=`du -sb ${2}|awk '{print $1}'`
HSIZE=`numfmt --to=iec --suffix=B --padding=6 ${SIZE}`
NAME=${3}
echo -e "${green}Total backup size is ${red}${HSIZE}"
read -p $'\e[1;32mContinue? y/n\e[0m ' yn
if [ "${yn}" == "y" ]; then
	if [ "${1}" == "xz" ]; then
		echo -e "${green}Creating archive with xz...${reset}"
		tar --dereference --hard-dereference -cf - -C ${2} .|pv -N "Total${HSIZE}" -W -F '%N %t %r %p %e' -s ${SIZE}k|xz -T 0 > ${NAME}.tar.xz && { echo -e "${green}Backup Complete.${reset}" && return 0 ; } || { echo -e "${red}ERROR. Backup failed.${reset}" && return 1 ; }
	elif [ "${1}" == "lrzip" ]; then
		command -v lrzip >/dev/null 2>&1 || { echo -e >&2 "${red}lrzip not installed!" && return 1; }
		tar --dereference --hard-dereference -cf - -C ${2} .|pv -N "Total${HSIZE}" -W -F '%N %t %r %p %e' -s ${SIZE}k|lrzip -p $(($(nproc --all) + 1)) -o ${NAME}.tar.lrz && { echo -e "${green}Backup Complete.${reset}" && return 0 ; } || { echo -e "${red}ERROR. Backup failed.${reset}" && return 1 ; }
	else
		echo -e "${red}Wrong argument! specify xz or lrz.${reset}"
		return 1
		kill -INT ${$}
	fi
fi
